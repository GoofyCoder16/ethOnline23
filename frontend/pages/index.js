import Head from "next/head";
import { contractAddresses, abi } from "../constants"
import Header from "../components/Header";
import { useMoralis, useWeb3Contract  } from "react-moralis";
import {useState,useEffect} from 'react';
import { useNotification } from "web3uikit"
import { ethers } from "ethers"




const supportedChains = ["5"];

export default function Home() {
  const {Moralis, isWeb3Enabled,chainId: chainIdHex,account } = useMoralis();
  const [responseBytes, setResponseBytes] = useState("");
  const [inputValue, setInputValue] = useState("");
  const [startTimer, setStartTimer] = useState(false);
  const [timer, setTimer] = useState(10); // Initial timer value in seconds
  const [displayDiv, setDisplayDiv] = useState(false);
const chainId = parseInt(chainIdHex)
const contractAddress = chainId in contractAddresses ? contractAddresses[chainId][0] : null
const dispatch = useNotification()
let value=inputValue+account;
const _value = ethers.utils.toUtf8Bytes(value);
let hash = ethers.utils.keccak256(_value);
let hashString = ethers.utils.hexlify(hash);

let check=inputValue+ " youtube link description contains "+ hashString;
const {
  runContractFunction: addVideo,
  data: enterTxResponse,
  isLoading,
  isFetching,
} = useWeb3Contract({
  abi: abi,
  contractAddress: contractAddress,
  functionName: "addVideo",
  params: {
    _check:check,
  },
})
const handleNewNotification = () => {
  dispatch({
      type: "info",
      message: "Transaction Complete!",
      title: "Transaction Notification",
      position: "topR",
      icon: "bell",
  })
}
useEffect(() => {
  if (startTimer) {
    if (timer > 0) {
      const countdown = setTimeout(() => {
        setTimer(timer - 1);
      }, 1000); // Update the timer every 1 second

      return () => clearTimeout(countdown);
    } else {
      setDisplayDiv(true);
    }
  }
}, [timer, startTimer]);

const handleStartTimer = () => {
  setStartTimer(true);
};
const { runContractFunction: getAssertionResult } = useWeb3Contract({
  abi: abi,
  contractAddress: contractAddress,
  functionName: "getConfirmation",
  params: {
    _link:inputValue,
  },
})

const handleSuccess2 = async (tx) => {
  try {
      await tx.wait(1)
      console.log(tx)
      handleNewNotification(tx)
     handleStartTimer();
  } catch (error) {
      console.log(error)
  }
}
const handleSuccess = async (tx) => {
  try {
      await tx.wait(1)
      console.log(tx)
      handleNewNotification(tx)
  } catch (error) {
      console.log(error)
  }
}
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      {isWeb3Enabled ? (
        <div>
          {supportedChains.includes(parseInt(chainId).toString()) ? (
            <div className="flex flex-row">
                   
  {!startTimer ? ( <div>
      <input
        type="text"
        placeholder="Enter Youtube link"
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
      />
      <div>
     {check}
        
        </div> <button
                        className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded ml-auto"
                        onClick={
                          async () =>
                            await addVideo({
                                onSuccess: handleSuccess2,
                                onError: (error) => console.log(error),
                            })
            
                        }
                        disabled={isLoading || isFetching}
                    >
                        {isLoading || isFetching ? (
                            <div className="animate-spin spinner-border h-8 w-8 border-b-2 rounded-full"></div>
                        ) : (
                            "Add Video Link"
                        )}
                    </button></div> ):null}

{!startTimer ? (
        null
      ) : (
        <div>
          {startTimer && (
            <p>Timer: {timer} seconds</p>
          )}
          {displayDiv ? (
            <div> <button
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded ml-auto"
            onClick={
              async () =>
                await getAssertionResult({
                    onSuccess: handleSuccess,
                    onError: (error) => console.log(error),
                })
            }
            disabled={isLoading || isFetching}
        >
          
                Get confirmation
        </button></div>
          ) : null}
        </div>
      )}
               </div>
          ) : (
            <div>{`Please switch to a supported chainId. The supported Chain Ids are: ${supportedChains}`}</div>
          )}
        </div>
      ) : (
        <div>Please connect to a Wallet</div>
      )}
    </div>
  );
}
